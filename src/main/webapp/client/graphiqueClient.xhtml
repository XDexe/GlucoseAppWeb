<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:h="http://xmlns.jcp.org/jsf/html"
      xmlns:ui="http://xmlns.jcp.org/jsf/facelets"
      xmlns:f="http://xmlns.jcp.org/jsf/core"
      xmlns:p="http://primefaces.org/ui">
<h:head>
    <title>Graphique d'Activité</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>

    <h:outputStylesheet library="css" name="mainCss.css"/>
    <h:outputStylesheet library="css" name="topbar.css"/>

    <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.1/dist/chart.umd.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/hammerjs@2.0.8"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns/dist/chartjs-adapter-date-fns.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-zoom@2.0.1/dist/chartjs-plugin-zoom.min.js"></script>

    <h:outputStylesheet library="css" name="graph.css"/>
</h:head>

<h:body>

    <ui:include src="/WEB-INF/template/topbarClient.xhtml"/>

    <main>
        <div class="graph-page-container">
            <div class="graph-card">
                <canvas id="line"></canvas>
            </div>

            <div class="graph-actions">
                <p:commandButton value="Réinitialiser le zoom" styleClass="graph-button" type="button" onclick="if(window.lineChart) window.lineChart.resetZoom();"/>
                <p:link outcome="/client/listeActivites.html" value="Retour à la liste" styleClass="graph-button"/>
            </div>
        </div>
    </main>

    <h:form id="formData">
        <h:inputHidden id="idActivite" value="#{activiteController.activite.id}"/>
        <h:inputHidden id="isAlive" value="#{activiteController.activite.alive}"/>
    </h:form>

    <p:remoteCommand name="seuilmax" action="#{activiteController.getSeuilMax()}" oncomplete="window.seuilMax = args.seuilMax;"/>
    <p:remoteCommand name="seuilmin" action="#{activiteController.getSeuilMin()}" oncomplete="window.seuilMin = args.seuilMin;"/>

    <f:metadata>
        <f:viewAction action="#{activiteController.loadActivite()}"/>
        <f:viewAction action="seuilmax()"/>
        <f:viewAction action="seuilmin()"/>
    </f:metadata>

    <h:outputScript>
        let idActivite = document.getElementById('formData:idActivite').value;
        let isAlive = document.getElementById('formData:isAlive').value;
        let ws;
        var lineChart; // Déclarer lineChart dans une portée globale

        const themeColors = {
            background: '#FBF9F3',
            text: '#333',
            grid: '#E8E6D6',
            glucoseLine: '#23252E',
            maxLine: '#d9534f',
            minLine: '#5cb85c'
        };
        Chart.defaults.font.family = "'LEMON MILK Pro FTR', sans-serif";
        Chart.defaults.color = themeColors.text;

        if (isAlive === "true") {
            ws = new WebSocket("ws://172.22.40.116:8080/GlucoseApplication-1.0-SNAPSHOT/websocketdata");

            ws.onopen = event => {
                ws.send("abonnement#" + idActivite);
            };

            ws.onmessage = event => {
                let txt = event.data;
                let txtJson = JSON.parse(txt);
                let temps = new Date(txtJson.dateData);
                let glucoseConverted = txtJson.glucose;

                if (lineChart) {
                    lineChart.data.labels.push(temps);
                    lineChart.data.datasets[0].data.push(glucoseConverted);
                    lineChart.data.datasets[1].data.push(window.seuilMax);
                    lineChart.data.datasets[2].data.push(window.seuilMin);
                    lineChart.update();
                }
            };
        }

        const data = {
            labels: [],
            datasets: [{
                label: 'Taux de glucose (mg/dL)',
                data: [],
                fill: false,
                borderColor: themeColors.glucoseLine,
                backgroundColor: themeColors.glucoseLine,
                tension: 0.2
            },
                {
                    label: 'Taux Max',
                    data: [],
                    borderColor: themeColors.maxLine,
                    borderDash: [5, 5],
                    pointRadius: 0,
                    fill: false
                },
                {
                    label: 'Taux Min',
                    data: [],
                    borderColor: themeColors.minLine,
                    borderDash: [5, 5],
                    pointRadius: 0,
                    fill: false
                }]
        };

        const config = {
            type: 'line',
            data: data,
            options: {
                responsive: true,
                maintainAspectRatio: true,
                animation: false,
                plugins: {
                    zoom: {
                        pan: { enabled: true, mode: 'x' },
                        zoom: { wheel: { enabled: true }, pinch: { enabled: true }, mode: "xy" }
                    }
                },
                scales: {
                    x: {
                        type: 'time',
                        time: { tooltipFormat: 'yyyy-MM-dd HH:mm:ss', unit: 'minute', displayFormats: {minute: 'HH:mm'} },
                        grid: { color: themeColors.grid }
                    },
                    y: {
                        beginAtZero: false,
                        grid: { color: themeColors.grid }
                    }
                }
            }
        };

        lineChart = new Chart(document.getElementById('line'), config);

        function updateChart(newData, seuilMax, seuilMin) {
            const datas = newData;
            datas.forEach((data) => {
                let temps = new Date(data.dateData);
                let glucoseConverted = parseFloat(data.glucose);
                lineChart.data.labels.push(temps);
                lineChart.data.datasets[0].data.push(glucoseConverted);
                lineChart.data.datasets[1].data.push(seuilMax);
                lineChart.data.datasets[2].data.push(seuilMin);
            });
            lineChart.update();
        }

        function fetchData(idActivite) {
            fetch('http://172.22.40.116:8080/GlucoseApplication-1.0-SNAPSHOT/api/activite/read?idActivite=' + idActivite, {})
                    .then(response => response.json())
                    .then(dataJsonActivite => {
                        if (dataJsonActivite &amp;&amp; dataJsonActivite.utilisateur) {
                            var data = dataJsonActivite.listDonnees;

                            var seuilMax = parseFloat(dataJsonActivite.utilisateur.seuilMax);
                            var seuilMin = parseFloat(dataJsonActivite.utilisateur.seuilMin);

                            window.seuilMax = seuilMax;
                            window.seuilMin = seuilMin;

                            if (data &amp;&amp; Array.isArray(data)) {
                                updateChart(data, seuilMax, seuilMin);
                            }
                        }
                    })
                    .catch(error => console.error('Error fetching chart data:', error));
        }

        fetchData(idActivite);

    </h:outputScript>

</h:body>
</html>